@model MiGenteEnLinea.Web.Controllers.EmpleadorController.DetalleContratacionViewModel

@{
    ViewData["Title"] = "Detalle de Contratación";
    Layout = "~/Views/Shared/_LayoutEmpleador.cshtml";
    var contratacionID = ViewBag.ContratacionID;
    var detalleID = ViewBag.DetalleID;
}

<div class="container-fluid">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/Empleador/Colaboradores">Colaboradores</a></li>
            <li class="breadcrumb-item active">Detalle de Contratación</li>
        </ol>
    </nav>

    <!-- Título -->
    <h2 class="section-title text-gray mb-4">
        <a href="@Url.Action("ColaboradorTemporal", "Empleador", new { contratacionID = contratacionID })" class="text-decoration-none text-gray">
            @Model.NombreContratista
        </a>
    </h2>

    <div class="row">
        <!-- Card: Detalles de Contratación -->
        <div class="col-md-6 mt-1">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-file-text me-2"></i>Detalles de Contratación
                    </h5>
                </div>
                <div class="card-body">
                    <form id="formContratacion">
                        <!-- Descripción Corta -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Descripción Corta</label>
                            <input type="text" class="form-control" id="descripcionCorta" 
                                   maxlength="60" value="@Model.DescripcionCorta">
                        </div>

                        <!-- Descripción Ampliada -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Descripción Ampliada</label>
                            <textarea class="form-control" id="descripcionAmpliada" 
                                      rows="3" maxlength="250">@Model.DescripcionAmpliada</textarea>
                        </div>

                        <!-- Fecha Inicio -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Fecha de Inicio</label>
                            <input type="date" class="form-control" id="fechaInicio" 
                                   value="@Model.FechaInicio?.ToString("yyyy-MM-dd")">
                        </div>

                        <!-- Fecha Conclusión -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Fecha de Conclusión Esperada</label>
                            <input type="date" class="form-control" id="fechaConclusion" 
                                   value="@Model.FechaConclusion?.ToString("yyyy-MM-dd")">
                        </div>

                        <!-- Monto Acordado -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Monto Total Acordado</label>
                            <input type="number" class="form-control" id="montoAcordado" 
                                   step="0.01" value="@Model.MontoAcordado">
                        </div>

                        <!-- Esquema de Pagos -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Esquema de Pagos</label>
                            <select class="form-select" id="esquemaPagos">
                                <option value="1" selected="@(Model.EsquemaPagos == "1")">100% Contra Entrega</option>
                                <option value="2" selected="@(Model.EsquemaPagos == "2")">50% Avance / 50% Finalizado</option>
                                <option value="3" selected="@(Model.EsquemaPagos == "3")">30% Avance / 70% Finalizado</option>
                            </select>
                        </div>

                        <!-- Botones de Acción -->
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-primary" onclick="actualizarContratacion()" 
                                    id="btnActualizar" @(Model.Estatus > 1 || Model.MontoPendiente < 1 ? "disabled" : "")>
                                <i class="bi bi-save me-2"></i>Actualizar Información
                            </button>
                            <button type="button" class="btn btn-danger" onclick="confirmarCancelar()" 
                                    id="btnCancelar" @(Model.Estatus > 1 || Model.MontoPendiente < 1 ? "disabled" : "")>
                                <i class="bi bi-x-circle me-2"></i>Cancelar Trabajo
                            </button>
                            <button type="button" class="btn btn-success" onclick="confirmarFinalizar()" 
                                    id="btnFinalizar" @(Model.Estatus > 1 || Model.MontoPendiente < 1 ? "disabled" : "")>
                                <i class="bi bi-check-circle me-2"></i>Trabajo Finalizado
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Card: Detalles de Pagos -->
        <div class="col-md-6 mt-1">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-cash-stack me-2"></i>Detalles de Pagos
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Resumen de Montos -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <h6>Monto Acordado:</h6>
                            <h6 class="text-primary">RD$ @Model.MontoAcordado.ToString("N2")</h6>
                        </div>
                        <div class="col-md-4">
                            <h6>Pagos Realizados:</h6>
                            <h6 class="text-success">RD$ @Model.PagosRealizados.ToString("N2")</h6>
                        </div>
                        <div class="col-md-4">
                            <h6 class="text-danger">Monto Pendiente:</h6>
                            <h6 class="text-danger fw-bold">RD$ @Model.MontoPendiente.ToString("N2")</h6>
                        </div>
                    </div>

                    <hr>

                    <!-- Tabla de Pagos -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Fecha de Pago</th>
                                    <th>Monto</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Pagos != null && Model.Pagos.Any())
                                {
                                    foreach (var pago in Model.Pagos)
                                    {
                                        <tr>
                                            <td>@pago.FechaPago.ToString("dd/MM/yyyy")</td>
                                            <td>RD$ @pago.Monto.ToString("N2")</td>
                                            <td>
                                                <button class="btn btn-sm btn-primary me-1" 
                                                        onclick="imprimirRecibo(@pago.PagoID)">
                                                    <i class="bi bi-printer"></i> Imprimir
                                                </button>
                                                <button class="btn btn-sm btn-danger" 
                                                        onclick="confirmarAnularRecibo(@pago.PagoID)">
                                                    <i class="bi bi-x-circle"></i> Anular
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="3" class="text-center text-muted">
                                            No hay pagos registrados
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="card-footer">
                    <button type="button" class="btn btn-success w-100" data-bs-toggle="modal" 
                            data-bs-target="#modalPago" id="btnAbrirPago" 
                            @(Model.MontoPendiente < 1 || Model.Estatus > 1 ? "disabled" : "")>
                        <i class="bi bi-currency-dollar me-2"></i>Realizar Pago
                    </button>
                </div>
            </div>

            <!-- Card: Calificación (solo si finalizado) -->
            @if (Model.Estatus > 1)
            {
                <div class="card shadow-sm mt-3">
                    <div class="card-header bg-gradient-primary text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-star-fill me-2"></i>Calificación de Trabajo
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (Model.Calificado)
                        {
                            <h6>Calificación Suministrada</h6>
                            <div class="rating-display">
                                @{
                                    var promedio = (Model.Puntualidad + Model.Cumplimiento + Model.Conocimientos + Model.Recomendacion) / 4.0m;
                                    for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= promedio)
                                        {
                                            <i class="bi bi-star-fill text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star text-secondary"></i>
                                        }
                                    }
                                }
                                <span class="ms-2">(@promedio.ToString("N1"))</span>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-primary mt-2" 
                                    data-bs-toggle="modal" data-bs-target="#modalCalificar">
                                <i class="bi bi-pencil me-2"></i>Editar Calificación
                            </button>
                        }
                        else
                        {
                            <h6>Para calificar el trabajo primero debe finalizar el mismo</h6>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal: Realizar Pago -->
<div class="modal fade" id="modalPago" tabindex="-1" aria-labelledby="modalPagoLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="modalPagoLabel">
                    <i class="bi bi-currency-dollar me-2"></i>Realizar Pago a Colaborador
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="formPago">
                    <div class="row">
                        <!-- Concepto -->
                        <div class="col-lg-12 mb-3">
                            <label class="form-label fw-bold">Concepto de Pago</label>
                            <select class="form-select" id="conceptoPago">
                                <option value="Pago de Avance">Pago de Avance</option>
                                <option value="Pago Final">Pago Final</option>
                            </select>
                        </div>

                        <!-- Fecha Pago -->
                        <div class="col-lg-6 mb-3">
                            <label class="form-label fw-bold">Fecha de Pago</label>
                            <input type="date" class="form-control" id="fechaPagoProcesar" 
                                   value="@DateTime.Now.ToString("yyyy-MM-dd")">
                        </div>

                        <!-- Monto -->
                        <div class="col-lg-6 mb-3">
                            <label class="form-label fw-bold">Monto</label>
                            <div class="input-group">
                                <span class="input-group-text">RD$</span>
                                <input type="number" class="form-control" id="montoPagoProcesar" 
                                       step="0.01" placeholder="0.00">
                                <button type="button" class="btn btn-primary" onclick="agregarDetallePago()">
                                    <i class="bi bi-plus-circle"></i> Agregar
                                </button>
                            </div>
                        </div>
                    </div>

                    <hr>

                    <h6>Detalle de Pago</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th width="70%">Concepto</th>
                                    <th>Monto</th>
                                    <th>Acción</th>
                                </tr>
                            </thead>
                            <tbody id="tbodyDetallePago">
                                <tr>
                                    <td colspan="3" class="text-center text-muted">
                                        No hay conceptos agregados
                                    </td>
                                </tr>
                            </tbody>
                            <tfoot>
                                <tr class="fw-bold">
                                    <td class="text-end">Total a Pagar:</td>
                                    <td colspan="2" id="totalPagar">RD$ 0.00</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-success" onclick="procesarPago()">
                    <i class="bi bi-check-circle me-2"></i>Procesar Pago
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Calificar Trabajo -->
<div class="modal fade" id="modalCalificar" tabindex="-1" aria-labelledby="modalCalificarLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="modalCalificarLabel">
                    <i class="bi bi-star-fill me-2"></i>Calificar Perfil
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="formCalificar">
                    <!-- Puntualidad -->
                    <div class="mb-4">
                        <label class="form-label fw-bold">¿Cuántas estrellas le das a su puntualidad?</label>
                        <div class="star-rating" data-rating="@Model.Puntualidad" data-field="puntualidad">
                            <i class="bi bi-star star-icon" data-value="1"></i>
                            <i class="bi bi-star star-icon" data-value="2"></i>
                            <i class="bi bi-star star-icon" data-value="3"></i>
                            <i class="bi bi-star star-icon" data-value="4"></i>
                            <i class="bi bi-star star-icon" data-value="5"></i>
                        </div>
                        <input type="hidden" id="rating_puntualidad" value="@Model.Puntualidad">
                    </div>

                    <!-- Servicio/Cumplimiento -->
                    <div class="mb-4">
                        <label class="form-label fw-bold">¿Qué te pareció el Servicio Recibido?</label>
                        <div class="star-rating" data-rating="@Model.Cumplimiento" data-field="cumplimiento">
                            <i class="bi bi-star star-icon" data-value="1"></i>
                            <i class="bi bi-star star-icon" data-value="2"></i>
                            <i class="bi bi-star star-icon" data-value="3"></i>
                            <i class="bi bi-star star-icon" data-value="4"></i>
                            <i class="bi bi-star star-icon" data-value="5"></i>
                        </div>
                        <input type="hidden" id="rating_cumplimiento" value="@Model.Cumplimiento">
                    </div>

                    <!-- Conocimientos -->
                    <div class="mb-4">
                        <label class="form-label fw-bold">¿Cómo calificas sus conocimientos profesionales?</label>
                        <div class="star-rating" data-rating="@Model.Conocimientos" data-field="conocimientos">
                            <i class="bi bi-star star-icon" data-value="1"></i>
                            <i class="bi bi-star star-icon" data-value="2"></i>
                            <i class="bi bi-star star-icon" data-value="3"></i>
                            <i class="bi bi-star star-icon" data-value="4"></i>
                            <i class="bi bi-star star-icon" data-value="5"></i>
                        </div>
                        <input type="hidden" id="rating_conocimientos" value="@Model.Conocimientos">
                    </div>

                    <!-- Recomendación -->
                    <div class="mb-4">
                        <label class="form-label fw-bold">¿Qué tanto lo recomendarías?</label>
                        <div class="star-rating" data-rating="@Model.Recomendacion" data-field="recomendacion">
                            <i class="bi bi-star star-icon" data-value="1"></i>
                            <i class="bi bi-star star-icon" data-value="2"></i>
                            <i class="bi bi-star star-icon" data-value="3"></i>
                            <i class="bi bi-star star-icon" data-value="4"></i>
                            <i class="bi bi-star star-icon" data-value="5"></i>
                        </div>
                        <input type="hidden" id="rating_recomendacion" value="@Model.Recomendacion">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="confirmarCalificacion()">
                    <i class="bi bi-check-circle me-2"></i>Realizar Calificación
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Star Rating Component */
    .star-rating {
        font-size: 2rem;
        cursor: pointer;
        display: inline-block;
    }

    .star-rating .star-icon {
        color: #ddd;
        transition: color 0.2s ease;
        cursor: pointer;
    }

    .star-rating .star-icon:hover,
    .star-rating .star-icon.hover {
        color: gold;
    }

    .star-rating .star-icon.filled {
        color: gold;
    }

    .rating-display {
        font-size: 1.5rem;
    }
</style>

@section Scripts {
    <script>
        const contratacionID = @contratacionID;
        const detalleID = @detalleID;
        let detallesPago = [];

        $(document).ready(function () {
            inicializarStarRating();
            
            @if (Model.Estatus > 1 && !Model.Calificado)
            {
                <text>
                // Abrir modal de calificación automáticamente si el trabajo está finalizado y no calificado
                $('#modalCalificar').modal('show');
                </text>
            }
        });

        // ========== STAR RATING ==========
        function inicializarStarRating() {
            $('.star-rating .star-icon').on('click', function () {
                const rating = $(this).data('value');
                const container = $(this).closest('.star-rating');
                const field = container.data('field');

                // Update hidden input
                $(`#rating_${field}`).val(rating);

                // Update visual state
                container.data('rating', rating);
                actualizarStars(container, rating);
            });

            $('.star-rating .star-icon').on('mouseenter', function () {
                const rating = $(this).data('value');
                const container = $(this).closest('.star-rating');
                actualizarStars(container, rating);
            });

            $('.star-rating').on('mouseleave', function () {
                const currentRating = $(this).data('rating');
                actualizarStars($(this), currentRating);
            });

            // Initialize existing ratings
            $('.star-rating').each(function () {
                const rating = $(this).data('rating');
                actualizarStars($(this), rating);
            });
        }

        function actualizarStars(container, rating) {
            container.find('.star-icon').each(function () {
                const value = $(this).data('value');
                if (value <= rating) {
                    $(this).removeClass('bi-star').addClass('bi-star-fill filled');
                } else {
                    $(this).removeClass('bi-star-fill filled').addClass('bi-star');
                }
            });
        }

        // ========== ACTUALIZAR CONTRATACIÓN ==========
        function actualizarContratacion() {
            const request = {
                contratacionID: contratacionID,
                detalleID: detalleID,
                descripcionCorta: $('#descripcionCorta').val(),
                descripcionAmpliada: $('#descripcionAmpliada').val(),
                fechaInicio: $('#fechaInicio').val(),
                fechaConclusion: $('#fechaConclusion').val(),
                montoAcordado: parseFloat($('#montoAcordado').val()),
                esquemaPagos: $('#esquemaPagos').val()
            };

            $.ajax({
                url: '/Empleador/ActualizarContratacion',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(request),
                success: function (response) {
                    if (response.success) {
                        mostrarExito('Contratación actualizada correctamente');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        mostrarError(response.message || 'Error al actualizar');
                    }
                },
                error: function () {
                    mostrarError('Error de conexión');
                }
            });
        }

        // ========== REALIZAR PAGO ==========
        function agregarDetallePago() {
            const concepto = $('#conceptoPago').val();
            const monto = parseFloat($('#montoPagoProcesar').val());

            if (!monto || monto <= 0) {
                mostrarAdvertencia('Ingrese un monto válido');
                return;
            }

            detallesPago.push({ concepto, monto });
            renderizarDetallePago();
            $('#montoPagoProcesar').val('');
        }

        function renderizarDetallePago() {
            const tbody = $('#tbodyDetallePago');
            tbody.empty();

            if (detallesPago.length === 0) {
                tbody.append('<tr><td colspan="3" class="text-center text-muted">No hay conceptos agregados</td></tr>');
                $('#totalPagar').text('RD$ 0.00');
                return;
            }

            let total = 0;
            detallesPago.forEach((item, index) => {
                tbody.append(`
                    <tr>
                        <td>${item.concepto}</td>
                        <td>RD$ ${item.monto.toFixed(2)}</td>
                        <td>
                            <button class="btn btn-sm btn-danger" onclick="quitarDetalle(${index})">
                                <i class="bi bi-x-circle"></i>
                            </button>
                        </td>
                    </tr>
                `);
                total += item.monto;
            });

            $('#totalPagar').text(`RD$ ${total.toFixed(2)}`);
        }

        function quitarDetalle(index) {
            detallesPago.splice(index, 1);
            renderizarDetallePago();
        }

        function procesarPago() {
            if (detallesPago.length === 0) {
                mostrarAdvertencia('Debe agregar al menos un concepto de pago');
                return;
            }

            const total = detallesPago.reduce((sum, item) => sum + item.monto, 0);
            const montoPendiente = @Model.MontoPendiente;

            if (total > montoPendiente) {
                mostrarAdvertencia('El monto total no puede ser mayor al pendiente');
                return;
            }

            const request = {
                contratacionID: contratacionID,
                detalleID: detalleID,
                fechaPago: $('#fechaPagoProcesar').val(),
                conceptoPago: $('#conceptoPago').val(),
                detalles: detallesPago
            };

            $.ajax({
                url: '/Empleador/ProcesarPagoContratacion',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(request),
                success: function (response) {
                    if (response.success) {
                        $('#modalPago').modal('hide');
                        mostrarExito('Pago procesado correctamente');
                        
                        // Imprimir recibo
                        if (response.data && response.data.pagoID) {
                            imprimirRecibo(response.data.pagoID);
                        }
                        
                        setTimeout(() => location.reload(), 2000);
                    } else {
                        mostrarError(response.message || 'Error al procesar pago');
                    }
                },
                error: function () {
                    mostrarError('Error de conexión');
                }
            });
        }

        function imprimirRecibo(pagoID) {
            const url = `/Empleador/ImprimirReciboContratacion?pagoID=${pagoID}`;
            window.open(url, '_blank', 'width=800,height=600');
        }

        function confirmarAnularRecibo(pagoID) {
            Swal.fire({
                title: '¿Estás seguro?',
                text: '¿Deseas anular este recibo?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, anularlo',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#dc3545'
            }).then((result) => {
                if (result.isConfirmed) {
                    anularRecibo(pagoID);
                }
            });
        }

        function anularRecibo(pagoID) {
            $.ajax({
                url: '/Empleador/AnularReciboContratacion',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ pagoID }),
                success: function (response) {
                    if (response.success) {
                        mostrarExito('Recibo anulado correctamente');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        mostrarError(response.message || 'Error al anular recibo');
                    }
                },
                error: function () {
                    mostrarError('Error de conexión');
                }
            });
        }

        // ========== FINALIZAR/CANCELAR TRABAJO ==========
        function confirmarCancelar() {
            Swal.fire({
                title: '¿Estás seguro?',
                text: '¿Deseas cancelar este trabajo sin concluir?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, cancelarlo',
                cancelButtonText: 'No',
                confirmButtonColor: '#dc3545'
            }).then((result) => {
                if (result.isConfirmed) {
                    cancelarTrabajo();
                }
            });
        }

        function cancelarTrabajo() {
            $.ajax({
                url: '/Empleador/CancelarTrabajo',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ contratacionID, detalleID }),
                success: function (response) {
                    if (response.success) {
                        mostrarExito('Trabajo cancelado');
                        setTimeout(() => window.location.href = '/Empleador/Colaboradores', 1500);
                    } else {
                        mostrarError(response.message || 'Error al cancelar');
                    }
                },
                error: function () {
                    mostrarError('Error de conexión');
                }
            });
        }

        function confirmarFinalizar() {
            Swal.fire({
                title: '¿Finalizar trabajo?',
                text: '¿Deseas marcar este trabajo como finalizado?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Sí, finalizar',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#198754'
            }).then((result) => {
                if (result.isConfirmed) {
                    finalizarTrabajo();
                }
            });
        }

        function finalizarTrabajo() {
            $.ajax({
                url: '/Empleador/FinalizarTrabajo',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ contratacionID, detalleID }),
                success: function (response) {
                    if (response.success) {
                        mostrarExito('Trabajo finalizado. Ahora puedes calificarlo');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        mostrarError(response.message || 'Error al finalizar');
                    }
                },
                error: function () {
                    mostrarError('Error de conexión');
                }
            });
        }

        // ========== CALIFICAR ==========
        function confirmarCalificacion() {
            const puntualidad = parseInt($('#rating_puntualidad').val());
            const cumplimiento = parseInt($('#rating_cumplimiento').val());
            const conocimientos = parseInt($('#rating_conocimientos').val());
            const recomendacion = parseInt($('#rating_recomendacion').val());

            if (puntualidad === 0 || cumplimiento === 0 || conocimientos === 0 || recomendacion === 0) {
                mostrarAdvertencia('Debe calificar todas las categorías (mínimo 1 estrella)');
                return;
            }

            Swal.fire({
                title: 'Confirmación',
                text: '¿Estás seguro de que deseas calificar este perfil?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, calificar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    calificarPerfil(puntualidad, cumplimiento, conocimientos, recomendacion);
                }
            });
        }

        function calificarPerfil(puntualidad, cumplimiento, conocimientos, recomendacion) {
            const request = {
                contratacionID,
                detalleID,
                puntualidad,
                cumplimiento,
                conocimientos,
                recomendacion
            };

            $.ajax({
                url: '/Empleador/CalificarContratacion',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(request),
                success: function (response) {
                    if (response.success) {
                        $('#modalCalificar').modal('hide');
                        mostrarExito('Calificación guardada correctamente');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        mostrarError(response.message || 'Error al calificar');
                    }
                },
                error: function () {
                    mostrarError('Error de conexión');
                }
            });
        }

        // ========== UTILITIES ==========
        function mostrarExito(mensaje) {
            Swal.fire({
                icon: 'success',
                title: '¡Éxito!',
                text: mensaje,
                confirmButtonText: 'Aceptar'
            });
        }

        function mostrarError(mensaje) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: mensaje,
                confirmButtonText: 'Aceptar'
            });
        }

        function mostrarAdvertencia(mensaje) {
            Swal.fire({
                icon: 'warning',
                title: 'Atención',
                text: mensaje,
                confirmButtonText: 'Aceptar'
            });
        }
    </script>
}
